'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 1.10.0
var _ = require('lodash');

var Nurse = function () {
  function Nurse(robot) {
    _classCallCheck(this, Nurse);

    this.robot = robot;
    this.brainKey = 'sites';
    console.log("Nurse: Hi, I'm a nurse.");
  }

  _createClass(Nurse, [{
    key: 'getList',
    value: function getList() {
      console.log("Nurse: I'll go get patients."); //@@
      var list = void 0,
          ref = void 0;
      list = (ref = this.robot.brain.get(this.brainKey)) !== null ? ref : [];
      return list;
    }
  }, {
    key: 'removeSite',


    /* Remove */
    value: function removeSite(index) {
      var list = void 0,
          tmp = void 0;
      list = this.getList();

      /* エラーチェック(範囲外判定) */
      if (index > _.size(list) - 1) {
        return false;
      }

      /* 最後の出力に使う */
      tmp = {
        url: list[index].url,
        status: list[index].status
      };

      /* indexから1つ削除 */
      list.splice(index, 1);
      return tmp;
    }
  }, {
    key: 'updateSite',


    /* Update */
    value: function updateSite(index, newStatus) {
      var list = void 0;
      list = this.getList();
      if (index > _.size(list) - 1) {
        return false;
      }
      list[index].status = newStatus;
      return true;
    }
  }, {
    key: 'searchIndex',


    /* index生成 */
    value: function searchIndex(obj, key) {
      var index = void 0,
          newObj = void 0;
      newObj = _.map(obj, 'url');
      index = newObj.indexOf(key);
      if (index > -1) {
        return index;
      } else {
        return false;
      }
    }
  }, {
    key: 'checkConfliction',
    value: function checkConfliction(obj, key) {
      if (_.findIndex(obj, {
        url: key
      }) > -1) {
        return false;
      } else {
        return true;
      }
    }
  }]);

  return Nurse;
}();

module.exports.Nurse = Nurse;