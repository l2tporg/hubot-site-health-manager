// Generated by CoffeeScript 1.10.0
const Nurse = require('./Nurse').Nurse,
      Doctor = require('./Doctor').Doctor,
      request = require('request');

module.exports = function(robot) {
  const nurse = new Nurse(robot);
  // nurse.getList();
  /* 自発的なサイトチェック */
  /* healthExamineイベント方式 */
  // robot.hear(/she ex(?:amine)? with e(?:vent)?/i, function(msg) {
  //   var nurse, flags, list, i, len, site, results=[];
  //   nurse = new nurse(robot);
  //   /* 出力内容の選定 */
  //   /* ###1st: error, 2nd: success, 3rd: fault */
  //   flags = [1,1,1];
  //   list = nurse.getList();
  //   for (i = 0, len = list.length; i < len; i++) {
  //     site = list[i];
  //     results.push(robot.emit('healthExamine', site, flags, "bot"));
  //   }
  // });

  /* Doctor方式 */
  // robot.hear(/she ex(?:amine)? with d(?:octor)?/i, function(msg) {
  //   var list, nurse, Doctor, len, i, site;
  //   Doctor = new Doctor();
  //   nurse = new nurse(robot);
  //   list = nurse.getList();
  //   //監視対象リストとcallback関数とmsgを渡す。
  //   for(i = 0, len = list.length; i < len; i++) {
  //     site = list[i];
  //     Doctor.examine(site, examineCallback, msg);
  //   }
  // });
  // /* examine終了後のcallback */
  // var examineCallback = function(message, msg) {
  //   var results = [];
  //   if (message.status === "error") {
  //     results.push(msg.send(message.discription));
  //   } else if (message.status === "matched") {
  //     results.push(msg.send(message.discription));
  //   } else if (message.status === "unmatched") {
  //     results.push(msg.send(message.discription));
  //   } else {
  //     results.push(void 0);
  //   }
  //   return results;
  // };

  /* Add nurse to check */
  //she add <url> <statusCode>
  robot.hear(/she[\s]+add[\s]+(\S+)[\s]+(\d+)$/i, function(msg) {
    let list, i, index, status, url;
    const key = 'sites';
    list = nurse.getList();
    url = msg.match[1];
    status = Number(msg.match[2]);
    i = {
      url: url,
      status: status
    };
    if (nurse.checkConfliction(list, i.url)) {
      list.push(i);
      robot.brain.set(key, list); //@@!< keyがglobalの時も'sites'を参照するぞ
      index = nurse.searchIndex(list, i.url); //@@!
      return msg.send("added " + index + ": " + i.url + ", " + i.status);
    } else {
      return msg.send("Such url had already been registered.");
    }
  });

  /* Get List of nurse */
  //she list|ls
  robot.hear(/she[\s]+li?st?$/i, function(msg) {
    let list, message;
    list = nurse.getList();
    message = list.map(function(i) {
      return (nurse.searchIndex(list, i.url)) + ": " + i.url + " " + i.status;
    }).join('\n');
    if (message) {
      return msg.send(message);
    } else {
      return msg.send("empty");
    }
  });

  /* Update expected status code */
  //she update|ud <index> <statusCode>
  robot.hear(/she[\s]+up?d(?:ate)?[\s]+(\d+)[\s]+(\d+)$/i, function(msg) {
    let list, status, url;
    list = nurse.getList();
    url = msg.match[1];
    status = Number(msg.match[2]);
    if (nurse.updateSite(url, status)) {
      return msg.send("updated " + list[msg.match[1]].url + ", " + list[msg.match[1]].status);
    } else {
      return msg.send("error: There are no such registered site.");
    }
  });

  /* Remove Url from list */
  //she remove|rm <index>
  return robot.hear(/she[\s]+re?m(?:ove)?[\s]+(\d+)$/i, function(msg) {
    let list;
    list = nurse.removeSite(msg.match[1]);
    if (list !== false) {
      return msg.send("removed " + list.url + ", " + list.status);
    } else {
      return msg.send("error: There are no such registered site.");
    }
  });


  /** Redis **/
  /* get test */
  const getCallback = function (err, res) {
    if (err) {
      console.log("Getting ERROR: " + err);
    } else if (res.length === 0) {
      console.log("Getting ERROR: " + "empty");
    } else {
      console.dir(res);
    }
  };

  /* add test */
  const addCallback = function (err, res) {
    if (res === 'OK') {
      console.log("Adding: SUCCES");
      client.hgetall(key, getCallback);
    } else {
      console.log("Adding ERROR: " + "Unexpected Error");
    }
  };

  /* remove test */
  const removeCallback = function(err, res) {
    console.log("rm err: " + err); //@@
    console.log("rm res: " + res); //number of deleted elements.
  };

  // /* update test */
  const updateCallback = function(err, res) {
    console.log("ud err: " + err); //@@
    console.log("ud res: " + res); //1: Not exist and set it newly. 0: already exist and overwrite it.
  };


  /** calling **/
  // getList(getCallback);

  // array = ["http://goo.com", 200]; //overwiteを許してしまう
  // array = ["https://developer.ce/Global_Objects/Array/map", 200, "http://go.com", 303, "http://albatrosary.hateblo.jp/entry/2014/10/06/073638", 303]; //overwiteを許してしまう
  // addUrl(array, addCallback);

  // searchIndex("http://albatrosary.hateblo.jp/entry/2014/10/06/073638"); //url
  // var removeTargets = 2; //__> google & okumocchi are removed
  // removeUrl(removeTargets, removeCallback);

  // updateUrl(0, 500, updateCallback);
};
